
Knapsack probelm using Hill climbing algorithm

The code reads the items from a file and outputs the selected items and their
total value. It first imports the argparse and random modules. The argparse 
module is used to parse command-line arguments, while the random module is 
used to generate random initial solutions.

The knapsack function takes two arguments: items, which is a list of tuples 
representing the items to be selected, and max_weight, which is the maximum 
weight allowed. The function generates a random initial result and calculates 
its value and weight. It then iteratively generates all neighbors of the current 
result, evaluates them, and selects the best one until no further improvements 
can be made. Finally, it returns the best result found so far.

The algorithm works as follows:

Generate a random initial result then Calculate the value and weight of the initial 
result and Keep track of the best result found so far.After that Iterate until 
no further improvements can be made, Generate all neighbors of the current result.
Further more Evaluate all neighbors and select the best one then check If no 
better neighbor was found, return the best result found so far.

The main function parses command-line arguments using argparse, reads items 
from a file, and calls the knapsack function with items and maximum weight. 
If the algorithm specified in the command-line arguments is hill climbing, 
it prints the selected items and their total value.



knapsack problem using Simulated Annealing algorithm

The code starts by defining a function called knapsack that takes two arguments: 
items and max_weight. The items argument is a list of tuples where each tuple 
contains three values: value, weight, and id. The max_weight argument is an 
integer that represents the maximum weight that can be carried in the knapsack.

The function generates a random initial result and calculates the value and 
weight of the initial result. It then sets the initial temperature and cooling 
rate and iterates until the temperature is too low. During each iteration, it 
generates a random neighbor of the current result and calculates the value and 
weight of the neighbor result. If the neighbor is better, it accepts it. If this 
is the best result found so far, it remembers it. If the neighbor is worse, 
it accepts it with a certain probability based on the temperature. It then 
decreases the temperature according to the cooling rate.

Finally, if name == ‘main’: checks if this file was run directly or imported 
as a module. If it was run directly, it parses command line arguments using 
argparse.ArgumentParser() method and reads items from file specified in --file 
argument. Then it calls knapsack function with items and max_weight as arguments 
and prints out results.

